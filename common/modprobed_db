#!/bin/bash

# modprobed_db by graysky
#
# See this wiki article for more details:
# https://wiki.archlinux.org/index.php/Modprobed_db
#
# The purpose of this little script is to keep track of EVERY single module
# that your system has probed over a time period for the purpose of having the
# perfect amount of modules compiled into your kernel via the make localmodconfig
# option.
#
VERS="@VERSION@"
export BLD="\e[01m" RED="\e[01;31m" GRN="\e[01;32m" YLW="\e[01;33m" NRM="\e[00m"

echo -e "${RED}Modprobed_db v$VERS${NRM}"
echo

if [[ -f /etc/modprobed_db.conf ]]; then
	. /etc/modprobed_db.conf
else
	echo -e "${RED}Error${NRM}${BLD}: ${YLW}/etc/modprobed_db.conf${NRM}${BLD} is missing.  Reinstall this package and try again."${NRM}
	exit 1
fi

# default in conf is not to define one so do it here
[[ -z $DBPATH ]] && DBPATH="/var/log"

db="$DBPATH/modprobed.db"

list() {
	if [[ -f "$db" ]]; then
		cat "$db"
		dbsize=$(wc -l <"$db")
		echo
		echo -e ${YLW}"$db ${NRM}${BLD}contains this many records: $dbsize"${NRM}
	else
		echo -e ${BLD}"No database found."${NRM}
		echo -e ${BLD}"Create one via: ${RED}/usr/bin/modprobed_db store${NRM}${BLD} and try again."${NRM}
		exit 1
	fi
}

recall() {
	# since version 2.17 the redundant file is deprecated
	[[ -f "$DBPATH/modprobed.long" ]] && rm -f $DBPATH/modprobed.long

	if [[ $EUID -ne 0 ]]; then
		echo -e ${BLD}"This function must be called as root!"${NRM} 1>&2
		exit 0
	fi

	if [[ -f "$db" ]]; then
		# sed statement converts the db to a single, run-on sentence for modprobe
		modprobe -a $(sed ':a;N;$!ba;s/\n/ /g' "$db")
		echo -e ${BLD}"Done!  Modprobed all modules in ${YLW}$db"${NRM}
	else
		echo -e ${BLD}"No database found."${NRM}
		echo -e ${BLD}"Create one via: ${RED}/usr/bin/modprobed_db store${NRM}${BLD} and try again."${NRM}
		exit 0
	fi
}

store() {
	if [[ ! -f "$db" ]]; then
		echo -e ${BLD}"No db present so making ${YLW}$db"${NRM}
		cat /proc/modules | awk '{print $1}' | sort -k 1,1 | \
			grep -Ev "`echo ${IGNORE[*]} | \
			sed -e 's/^/^(/' -e 's/ /|/g' -e 's/$/)$/'`" > "$db"
	fi

	dbsize=$(wc -l <"$db")
	echo -e ${YLW}"$db ${NRM}${BLD}contains this many records: $dbsize"${NRM}
	dbcheck=$(md5sum "$db" | cut -c1-32)

	cat /proc/modules | awk '{print $1}' | sort -k 1,1 | \
		grep -Ev "`echo ${IGNORE[*]} | \
		sed -e 's/^/^(/' -e 's/ /|/g' -e 's/$/)$/'`" > /tmp/.inmem
	sort -k 1,1 "$db" /tmp/.inmem | uniq > /tmp/.potential_new_db
	newcheck=$(md5sum /tmp/.potential_new_db | cut -c1-32)

	if [[ "$dbcheck" != "$newcheck" ]]; then
		WHATSNEW=$(grep -Fxvf "$db" /tmp/.potential_new_db)
		echo -e ${YLW}"New module(s) detected: ${NRM}${BLD}$WHATSNEW"${NRM}
		cp /tmp/.potential_new_db "$db"
		newdbsize=$(wc -l <"$db")
		echo -e ${YLW}"$db ${NRM}${BLD}contains this many records: $dbsize"${NRM}
	else
		echo -e ${BLD}"No new modules detected.  Taking no action."${NRM}
	fi
}

cleanup() {
	[[ -f /tmp/.inmem ]] && rm -f /tmp/.inmem
	[[ -f /tmp/.potential_new_db ]] && rm -f /tmp/.potential_new_db
}

case $1 in
	l|L|List|list)
		list
		exit 0
		;;
	r|R|Recall|recall)
		recall
		exit 0
		;;
	s|S|Store|store)
		store
		cleanup
		;;
	*)
		echo -e ${BLD}"$0${NRM}${GRN} {list|recall|store}"${NRM}
		echo -e ${BLD}"See manpage for additional details"${NRM}
		exit 0
esac
