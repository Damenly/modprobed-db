#!/bin/bash

# modprobed_db by graysky
#
# See this wiki article for more details:
# https://wiki.archlinux.org/index.php/Modprobed_db
#
# The purpose of this little script is to keep track of EVERY single module
# that your system has probed over a time period for the purpose of having the
# perfect amount of modules compiled into your kernel via the make localmodconfig
# option.
#
VERS="@VERSION@"

if [[ ! -f /usr/share/modprobed_db/modprobed_db.skel ]]; then
	echo '/usr/share/modprobed_db/modprobed_db.skel is missing, please reinstall this package.'
	exit 1
fi

# We need to keep book on which user runs this script invoking it via sudo
#
# find user invoking the script
USER=$(logname)

# find user's homedir and use it
HOMEDIR="$(getent passwd $USER | cut -d: -f6)"

CFG_FILE=$HOMEDIR/.config/modprobed_db.conf

if [[ ! -f "$CFG_FILE" ]]; then
	echo '------------------------------------------------------------'
	echo ' No config file found so creating a fresh one in:'
	echo " $HOMEDIR/.config/modprobed_db.conf"
	echo
	echo ' Consult the man page for setup instructions.'
	if [[ -f /etc/modprobed_db.conf ]]; then
		echo
		echo ' Notice:'
		echo ' /etc/modprobed_db.conf was found on your system.'
		echo ' This file depreciated starting in version 2.19.'
		echo ' Please diff this file against the freshly created one.'
		echo
		echo ' Do NOT just blindly overwrite!'
	fi
	sed  "s|@HOME@|$HOMEDIR|" /usr/share/modprobed_db/modprobed_db.skel >$CFG_FILE
	echo '------------------------------------------------------------'
	exit 0
else
	. $CFG_FILE
	DB="$DBPATH/modprobed.db"
fi

# default colors if undefined are for dark backgrounds
[[ -z "$COLORS" ]] && COLORS="dark"
[[ "$COLORS" = "dark" ]] && export BLD="\e[01m" \
	RED="\e[01;31m" \
	GRN="\e[01;32m" \
	YLW="\e[01;33m" \
	NRM="\e[00m"
[[ "$COLORS" = "light" ]] && export BLD="\e[01m" \
	RED="\e[00;31m" \
	GRN="\e[00;32m" \
	YLW="\e[00;34m" \
	NRM="\e[00m"

check() {
	# print out currently loaded modules less those in the IGNORE array
	cat /proc/modules | awk '{print $1}' | sort -k 1,1 | \
		grep -Ev "$(echo ${IGNORE[*]} | sed -e 's/^/^(/' -e 's/ /|/g' -e 's/$/)$/')" \
		>/tmp/.inmem

	if [[ ! -f "$DB" ]]; then
		# check to see if user can write to $DBPATH
		if [[ -w "$DBPATH" ]]; then
			echo -e ${BLD}"No db present so just created one: ${YLW}$DB"${NRM}
			if [[ -f /var/log/modprobed.db ]]; then
				echo
				echo -e ${BLD}${RED}"NOTICE:"${NRM}
				echo -e ${BLD}${YLW}"/var/log/modprobed.db${NRM}${BLD} found on this system."${NRM}
				echo -e ${BLD}"It is recommended that you copy it to ${YLW}$HOME/.config/modprobed.db"${NRM}
				echo -e ${BLD}"since this is the new default location for the database."${NRM}
				echo
				echo -e ${BLD}"Once copied, please delete the old ${YLW}/var/log/modprobed.db"${NRM}
			fi
			cp /tmp/.inmem "$DB"
			exit 0
		else 
			echo -e ${RED}WARNING:${NRM}
			echo -e ${BLD}" Cannot create ${YLW}$DB${NRM}${BLD} since $USER does not have write access to ${YLW}$DBPATH"${NRM}
			echo
			echo -e ${BLD} Your options:${NRM}
			echo -e ${BLD}"  1) Run $0 as root then change owners of the database like this:"${NRM}
			echo -e ${BLD}"     # chown $USER:$(id -g -n $(whoami)) $DB"${NRM}
			echo
			echo -e ${BLD}"  or"${NRM}
			echo
			echo -e ${BLD}"  2) Redefine the DBPATH in ${YLW}$CFG_FILE${NRM}${BLD} to somewhere $(whoami) can write."${NRM}
			exit 1
		fi
	else
		DBSIZE=$(wc -l <"$DB")
		LOADSIZE=$(wc -l </tmp/.inmem)
	fi
}

recall() {
	# since version 2.17 the redundant file is deprecated so remove it
	[[ -f "$DBPATH/modprobed.long" ]] && rm -f $DBPATH/modprobed.long

	if [[ $EUID -ne 0 ]]; then
		echo -e ${BLD}"This function must be called as root!"${NRM}
		exit 1
	fi

	# sed statement converts the db to a single, run-on sentence for modprobe
	echo -e ${BLD}"Attempting to modprobe the contents of ${YLW}$DB"${NRM}${BLD}
	modprobe -a $(sed ':a;N;$!ba;s/\n/ /g' "$DB")
	# print out currently loaded modules less those in the IGNORE array
	cat /proc/modules | awk '{print $1}' | sort -k 1,1 | \
		grep -Ev "$(echo ${IGNORE[*]} | sed -e 's/^/^(/' -e 's/ /|/g' -e 's/$/)$/')" \
		>/tmp/.inmem

	echo
	echo -e ${RED}"$(wc -l </tmp/.inmem)${NRM}${BLD} modules are now loaded per ${YLW}/proc/modules"${NRM}
}

debug() {
	echo -e ${BLD}"The following are in the database but not loaded:"${NRM}
	grep -Fxvf /tmp/.inmem "$DB"
	echo
	echo -e ${BLD}"The following are loaded but not in the database:"${NRM}
	grep -Fxvf "$DB" /tmp/.inmem
}

store() {
	if [[ ! -w "$DB" ]]; then
		echo -e ${RED}WARNING:${NRM}
		echo -e ${BLD}" Cannot modify ${YLW}$DB${NRM}${BLD} since $(whoami) does not have write access!"${NRM}
		echo
		echo -e ${BLD} Your options:${NRM}
		echo -e ${BLD}"  1) Change owners of the database like this:"${NRM}
		echo -e ${BLD}"     # chown $(whoami):$(id -g -n $(whoami)) $DB"${NRM}
		echo
		echo -e ${BLD}"  or"${NRM}
		echo 
		echo -e ${BLD}"  2) Move ${YLW}$DB{${NRM}${BLD} to somewhere where $(whoami) can write"${NRM}
		echo -e ${BLD}"     and redefine the DBPATH in ${YLW}/etc/modprobed_db.conf${NRM}${BLD} reflect this new location."${NRM}
		exit 1
	fi

	DBCHECK=$(md5sum "$DB" | cut -c1-32)

	cat /proc/modules | awk '{print $1}' | sort -k 1,1 | \
		grep -Ev "`echo ${IGNORE[*]} | \
		sed -e 's/^/^(/' -e 's/ /|/g' -e 's/$/)$/'`" > /tmp/.inmem
	sort -k 1,1 "$DB" /tmp/.inmem | uniq > /tmp/.potential_new_db
	NEWCHECK=$(md5sum /tmp/.potential_new_db | cut -c1-32)

	if [[ "$DBCHECK" != "$NEWCHECK" ]]; then
		WHATSNEW=$(grep -Fxvf "$DB" /tmp/.potential_new_db)
		echo -e ${YLW}"New module(s) detected:\n${NRM}${BLD}$WHATSNEW"${NRM}
		cp /tmp/.potential_new_db "$DB"
		NEWDBSIZE=$(wc -l <"$DB")
		echo
		echo -e "$NEWDBSIZE modules are now saved in ${YLW}$DB ${NRM}${BLD}"
	else
		echo -e ${BLD}"No new modules detected.  Taking no action."${NRM}
	fi
}

cleanup() {
	[[ -f /tmp/.inmem ]] && rm -f /tmp/.inmem
	[[ -f /tmp/.potential_new_db ]] && rm -f /tmp/.potential_new_db
}

echo -e "${RED}Modprobed_db v$VERS${NRM}"
echo
check
echo -e ${BLD}"$LOADSIZE modules currently loaded per ${YLW}/proc/modules"${NRM}
echo -e ${BLD}"$DBSIZE modules are in ${YLW}$DB"${NRM}
echo

case $1 in
	l|L|List|list)
		less "$DB"; cleanup; exit 0
		;;
	r|R|Recall|recall)
		recall; cleanup; exit 0
		;;
	d|D|Debug|debug)
		debug; cleanup; exit 0
		;;
	s|S|Store|store)
		store; cleanup; exit 0
		;;
	*)
		echo -e ${BLD}"$0${NRM}${GRN} {list|recall|store|debug}"${NRM}
		echo -e ${BLD}"See manpage for additional details"${NRM}
		exit 0
esac
